{"ast":null,"code":"import { HttpErrorResponse, HttpEventType } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { tap, finalize, delay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"../services/loading.service\";\nexport let RestInterceptor = /*#__PURE__*/(() => {\n  class RestInterceptor {\n    constructor(snackBar, loadingService) {\n      this.snackBar = snackBar;\n      this.loadingService = loadingService;\n    }\n    intercept(request, next) {\n      const url = `${environment.baseURL}api/${request.url}`;\n      const urlReq = request.clone({\n        url\n      });\n      if (!request.reportProgress) {\n        this.loadingService.indeterminate.next(true);\n      }\n      return next.handle(urlReq).pipe(tap(event => {\n        switch (event.type) {\n          case HttpEventType.UploadProgress:\n            const progress = Math.round(100 * event.loaded / event.total);\n            this.loadingService.determinate.next(progress);\n            break;\n          case HttpEventType.Response:\n            const config = {\n              duration: 4000,\n              verticalPosition: 'top',\n              horizontalPosition: 'end',\n              panelClass: ['snackbar', 'snackbar-success']\n            };\n            switch (event.status) {\n              case 200:\n                if (request.method === 'PUT') {\n                  this.snackBar.open(\"Edit Success\", null, config);\n                }\n                break;\n              case 201:\n                this.snackBar.open(\"Create Success\", null, config);\n                break;\n              case 204:\n                this.snackBar.open(\"Delete Success\", null, config);\n                break;\n            }\n            break;\n        }\n      }, error => {\n        if (error instanceof HttpErrorResponse) {\n          const config = {\n            duration: 4000,\n            verticalPosition: 'top',\n            horizontalPosition: 'end',\n            panelClass: ['snackbar', 'snackbar-error']\n          };\n          if (error.status === 401 || error.status === 403) {\n            this.snackBar.open(\"UnAuthen\", null, config);\n          }\n          if (error.status === 404 && error.error.message) {\n            this.snackBar.open(error.error.message, null, config);\n          } else {\n            this.snackBar.open(error.message, null, config);\n          }\n        }\n      }), delay(1000), finalize(() => {\n        this.loadingService.indeterminate.next(false);\n      }));\n    }\n  }\n  RestInterceptor.ɵfac = function RestInterceptor_Factory(t) {\n    return new (t || RestInterceptor)(i0.ɵɵinject(i1.MatSnackBar), i0.ɵɵinject(i2.LoadingService));\n  };\n  RestInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RestInterceptor,\n    factory: RestInterceptor.ɵfac\n  });\n  return RestInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}