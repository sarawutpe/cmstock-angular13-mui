{"ast":null,"code":"import { TemplatePortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/overlay\";\nexport let LoadingService = /*#__PURE__*/(() => {\n  class LoadingService {\n    constructor(overlay) {\n      this.overlay = overlay;\n      this.overlayRef = this.createOverlay();\n      this.indeterminate = new Subject();\n      this.determinate = new Subject();\n      this.indeterminate.subscribe(show => {\n        if (show && !this.overlayRef.hasAttached()) {\n          this.showSpinner();\n        } else if (!show && this.overlayRef.hasAttached()) {\n          this.hideSpinner();\n        }\n      });\n      this.determinate.subscribe(number => {\n        if (number <= 100 && !this.overlayRef.hasAttached()) {\n          this.showSpinner();\n        } else if (number >= 100 && this.overlayRef.hasAttached()) {\n          this.hideSpinner();\n        }\n      });\n    }\n    createOverlay() {\n      return this.overlay.create({\n        hasBackdrop: true,\n        backdropClass: 'custom-backdrop',\n        positionStrategy: this.overlay.position().global().centerVertically().centerHorizontally()\n      });\n    }\n    showSpinner() {\n      this.overlayRef.attach(this.templatePortal);\n    }\n    hideSpinner() {\n      this.overlayRef.detach();\n    }\n    attach(templatePortalContent, viewContainerRef) {\n      this.templatePortal = new TemplatePortal(templatePortalContent, viewContainerRef);\n    }\n  }\n  LoadingService.ɵfac = function LoadingService_Factory(t) {\n    return new (t || LoadingService)(i0.ɵɵinject(i1.Overlay));\n  };\n  LoadingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoadingService,\n    factory: LoadingService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoadingService;\n})();","map":null,"metadata":{},"sourceType":"module"}